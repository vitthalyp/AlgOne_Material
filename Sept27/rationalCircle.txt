# point multiplication
def MULL(A,B):
    temp = []
    temp.append(A[0]*B[0]-A[1]*B[1])
    temp.append(A[1]*B[0]+A[0]*B[1])
    return temp

# point exponentiation
def Exp(A, kill):
    temp = A
    count = 0
    while (count<kill):
        temp = MULL(A,temp)
        count+=1
    return temp

# display a finite subset of a subgroup
def CycleGen(A, kill):
    print('The subgroup <',str(A),'> upto the exponents', -kill, 'and', kill)
    Ainv = [A[0],-A[1]]
    Q = circle((0,0),1,color = 'black', thickness = 0.1, axes = False)
    for c in range(0,kill):
        Q += point(tuple(Exp(A,c)), size = 2, color='red')
    for c in range(0,kill):
        Q += point(tuple(Exp(Ainv,c)), size = 2, color='red')
    show(Q)
    return

CycleGen((3/5,4/5),130)
CycleGen((9/41,40/41),130)