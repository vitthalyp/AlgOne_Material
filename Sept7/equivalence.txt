x = var('x')
y = var('y')
z = var('z')
P = point((1,1,1),color = 'white')
def helix(c):
    return parametric_plot3d((c*cos(2*pi*x),x,c*sin(2*pi*x)),(x,-0.5,c),color='black',axes =False)+parametric_plot3d((c*cos(2*pi*c),x,c*sin(2*pi*c)),(x,c,1),color='black',axes =False)+P
S = animate([helix(c) for c in sxrange(10^(-6),1,0.1)])

def helical(c):
    T = parametric_plot3d((cos(2*pi*x),x,sin(2*pi*x)), (x,-2,1), color = 'black', axes = False)
    T += point((cos(2*pi*c),c,sin(2*pi*c)))
    T += point((cos(2*pi*c),c-1,sin(2*pi*c)),color = 'red')
    T += point((cos(2*pi*c),c-2,sin(2*pi*c)),color = 'green')
    T += parametric_plot3d((cos(2*pi*x),2.5,sin(2*pi*x)), (x,0,1),axes = False, color='black')
    T += point((cos(2*pi*c),2.5,sin(2*pi*c)),color='black')
    return T
T = animate([helical(c) for c in sxrange(10^(-6),1,0.1)])

print('Please wait for the images to render.\n')
@interact
def _(display = selector(['Coil','Classes']),auto_update = False):
    if display == 'Coil':
        print('Coiling the real line into a helix.\n')
        S.show()
    else:
        print('The red, green, and blue points on the helix are identified with the single black point on the circle.\n')
        T.show()