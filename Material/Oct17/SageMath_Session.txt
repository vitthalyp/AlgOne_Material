# 0      Basic Group Operations

# 0.1    Constructing Groups

# 0.1.1  The additive group Z/nZ

#G = Zmod(7)             # Create the additive group
#G.order()               # Compute its order
#print(G(8)+G(2))        # SageMath reduces elements down to the representative choice and computes the answer

# 0.1.2  The mulitplicative group of (Z/nZ)*

#G = Zmod(41)            # Create the additive group (actually generates a more complex structure - a ring)
#H = G.unit_group()      # Isolate the multiplicative part ie., the group of units
#print(H.list())         # List the elements as symbols
#H.inject_variables()    # Ties symbols to their integer values
#print(G(f^3))           # Recover the underlying value 

# 0.1.3  The set of symmetries of the square

#G = DihedralGroup(4)    # Creating the group
#print(G.order())        # Return the order of the group
#print(G.cayley_table()) # Return the cayley table

# 0.2    Groups as Subgroups of Symmetric Groups

######################################################################################################################

# Cayley's theorem states that all finite groups are isomorphic to a subgroup of Sn, for an appropriately chosen n.
# SageMath (and other computational systems) are built off of this theorem, as all finite groups can be realized as\
# subgroups of a larger permutation group. 

######################################################################################################################

# 0.2.1   Symmetric Groups

#G = SymmetricGroup(4)                           # Create the symmetric group S4
#print(G.order())                                # Return the order
#print(G.list())                                 # List all the elements

# 0.2.1.1 Multiplying elements in symmetric groups (Computes from left to right)

#sigma = G("(1,2)")                              # create the 2-cycle (1,2)
#tau = G("(1,3)")                                # create the 2-cycle (1,3)
#print(sigma*tau)                                # compute sigma * tau
#print((sigma*tau)^(-1))                         # compute the inverse

# 0.2.2   Creating the group of symmetries of a square

#G = PermutationGroup([[(1,2,3,4)]
#                    ,[(1,2),(3,4)]])            # create a subgroup generated by (1,2,3,4) and (1,2)(3,4)
#H = DihedralGroup(4)
#print(G.is_isomorphic(H))                       # Are they isomorphic?

# 0.2.3   Cyclic Groups as Symmetric Groups

#G = CyclicPermutationGroup(20)                  # creates a cyclc group of order 20
#print(G.order())                                # verifies order
#for g in G:                                     # list all cyclic subgroups, repetitions exist!
    #temp = G.subgroup([g])
    #print(temp.order())
    #print(temp.gens())
    #print("\n")
    
# 0.2.4   The Cube Group

#G = CubeGroup()                                 # Create the Cube group
#for s in tuple(zip(G.gens(),G.gen_names())):    # Lists out the generators that represent face turns
    #print(s)